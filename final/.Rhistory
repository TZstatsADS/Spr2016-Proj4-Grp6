library("XML")
library("RCurl")
install.packages("bitops")
library("RCurl")
library("bitops")
library("RCurl")
search.amazon <- function(Keywords, SearchIndex = 'All', AWSAccessKeyId, AWSsecretkey, AssociateTag, ResponseGroup = 'ItemAttributes', Operation = 'ItemSearch'){
library(digest)
library(RCurl)
base.html.string <- "http://ecs.amazonaws.com/onca/xml?"
SearchIndex <- match.arg(SearchIndex, c('All',
'Apparel',
'Appliances',
'ArtsAndCrafts',
'Automotive',
'Baby',
'Beauty',
'Blended',
'Books',
'Classical',
'DigitalMusic',
'DVD',
'Electronics',
'ForeignBooks',
'Garden',
'GourmetFood',
'Grocery',
'HealthPersonalCare',
'Hobbies',
'HomeGarden',
'HomeImprovement',
'Industrial',
'Jewelry',
'KindleStore',
'Kitchen',
'Lighting',
'Magazines',
'Marketplace',
'Miscellaneous',
'MobileApps',
'MP3Downloads',
'Music',
'MusicalInstruments',
'MusicTracks',
'OfficeProducts',
'OutdoorLiving',
'Outlet',
'PCHardware',
'PetSupplies',
'Photo',
'Shoes',
'Software',
'SoftwareVideoGames',
'SportingGoods',
'Tools',
'Toys',
'UnboxVideo',
'VHS',
'Video',
'VideoGames',
'Watches',
'Wireless',
'WirelessAccessories'))
Operation <- match.arg(Operation, c('ItemSearch',
'ItemLookup',
'BrowseNodeLookup',
'CartAdd',
'CartClear',
'CartCreate',
'CartGet',
'CartModify',
'SimilarityLookup'))
ResponseGroup <- match.arg(ResponseGroup, c('Accessories',
'AlternateVersions',
'BrowseNodeInfo',
'BrowseNodes',
'Cart',
'CartNewReleases',
'CartTopSellers',
'CartSimilarities',
'Collections',
'EditorialReview',
'Images',
'ItemAttributes',
'ItemIds',
'Large',
'Medium',
'MostGifted',
'MostWishedFor',
'NewReleases',
'OfferFull',
'OfferListings',
'Offers',
'OfferSummary',
'PromotionSummary',
'RelatedItems',
'Request',
'Reviews',
'SalesRank',
'SearchBins',
'Similarities',
'Small',
'TopSellers',
'Tracks',
'Variations',
'VariationImages',
'VariationMatrix',
'VariationOffers',
'VariationSummary'),
several.ok = TRUE)
version.request = '2011-08-01'
Service = 'AWSECommerceService'
if(!is.character(AWSsecretkey)){
message('The AWSsecretkey should be entered as a character vect, ie be qouted')
}
pb.txt <- Sys.time()
pb.date <- as.POSIXct(pb.txt, tz = Sys.timezone)
Timestamp = strtrim(format(pb.date, tz = "GMT", usetz = TRUE, "%Y-%m-%dT%H:%M:%S.000Z"), 24)
str = paste('GET\necs.amazonaws.com\n/onca/xml\n',
'AWSAccessKeyId=', curlEscape(AWSAccessKeyId),
'&AssociateTag=', AssociateTag,
'&Keywords=', curlEscape(Keywords),
'&Operation=', curlEscape(Operation),
'&ResponseGroup=', curlEscape(ResponseGroup),
'&SearchIndex=', curlEscape(SearchIndex),
'&Service=AWSECommerceService',
'&Timestamp=', gsub('%2E','.',gsub('%2D', '-', curlEscape(Timestamp))),
'&Version=', version.request,
sep = '')
## signature test
#Signature = curlEscape(base64(hmac( enc2utf8((AWSsecretkey)), enc2utf8(str1), algo = 'sha256', serialize = FALSE,  raw = TRUE)))
Signature = curlEscape(base64(hmac( enc2utf8((AWSsecretkey)), enc2utf8(str), algo = 'sha256', serialize = FALSE,  raw = TRUE)))
AmazonURL <- paste(base.html.string,
'AWSAccessKeyId=', AWSAccessKeyId,
'&AssociateTag=', AssociateTag,
'&Keywords=', Keywords,
'&Operation=',Operation,
'&ResponseGroup=',ResponseGroup,
'&SearchIndex=', SearchIndex,
'&Service=AWSECommerceService',
'&Timestamp=', Timestamp,
'&Version=', version.request,
'&Signature=', Signature,
sep = '')
AmazonResult <- getURL(AmazonURL)
return(AmazonResult)
}
install.packages("data.table")
library(data.table)
setwd("C:\Users\ouwen\Downloads\moviecsv.csv")
setwd("C:/Users/ouwen/Downloads/moviecsv.csv")
amazondata <- fread("C:/Users/ouwen/Downloads/moviecsv.csv")
amazondata <- fread("C:/Users/ouwen/Downloads/moviescsv.csv")
keywords <- amazondata$product_productid
view(amazondata[1])
amazondata[1]
View(amazondata)
View(amazondata)
length(keywords)
for (i in 1 : 30 ){
newinfo[i] <- search.amazon(Keywords=keywords[i],AWSAccessKeyId="AKIAJCYPY2UUDPZA6W2Q",AWSsecretkey="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", AssociateTag="jzjz-20")
}
for (i in 1 : 30 ){
newinfo <- search.amazon(Keywords=keywords[i],AWSAccessKeyId="AKIAJCYPY2UUDPZA6W2Q",AWSsecretkey="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", AssociateTag="jzjz-20")
}
view(newinfo)
View(newinfo)
newinfo <- newinfo[1]
View(newinfo)
for (i in 1 : 30 ){
newinfo[i] <- search.amazon(Keywords=keywords[i],AWSAccessKeyId="AKIAJCYPY2UUDPZA6W2Q",AWSsecretkey="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", AssociateTag="jzjz-20")
}
View(newinfo)
newinfo <- 1
for (i in 1 : 30 ){
newinfo[i] <- search.amazon(Keywords=keywords[i],AWSAccessKeyId="AKIAJCYPY2UUDPZA6W2Q",AWSsecretkey="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", AssociateTag="jzjz-20")
}
View(newinfo)
View(newinfo[1])
View(newinfo[2])
View(newinfo[30])
View(newinfo[29])
for (i in 1 : 30 ){
newinfo[i] <- search.amazon(Keywords=keywords[i],AWSAccessKeyId="AKIAJCYPY2UUDPZA6W2Q",AWSsecretkey="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", AssociateTag="jzjz-20")
sys.sleep(0.3)
}
for (i in 1 : 30 ){
newinfo[i] <- search.amazon(Keywords=keywords[i],AWSAccessKeyId="AKIAJCYPY2UUDPZA6W2Q",AWSsecretkey="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", AssociateTag="jzjz-20")
Sys.sleep(0.3)
}
View(newinfo[30])
View(newinfo[29])
for (i in 1 : 30 ){
newinfo[i] <- search.amazon(Keywords=keywords[i],AWSAccessKeyId="AKIAJCYPY2UUDPZA6W2Q",AWSsecretkey="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", AssociateTag="jzjz-20")
View(newinfo[i])
Sys.sleep(0.3)
}
for (i in 1 : 30 ){
newinfo[i] <- search.amazon(Keywords=keywords[i],AWSAccessKeyId="AKIAJCYPY2UUDPZA6W2Q",AWSsecretkey="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", AssociateTag="jzjz-20")
Sys.sleep(1)
}
View(newinfo[30])
View(newinfo[20])
View(newinfo[10])
View(newinfo[18])
View(newinfo[30])
View(newinfo[1])
View(amazondata)
View(amazondata)
newdata <- amazondata(amazondata$review_helpfulness != "0/0" )
newdata <- amazondata[amazondata$review_helpfulness != "0/0" ]
View(newdata)
newdata <- newdata[amazondata$review_helpfulness != "0/1" ]
newdata <- newdata[amazondata$review_helpfulness != "1/1" ]
newdata <- amazondata[amazondata$review_helpfulness != "0/0" ]
newdata <- newdata[newdata$review_helpfulness != "0/1" ]
newdata <- newdata[newdata$review_helpfulness != "1/1" ]
View(newdata)
newdata <- amazondata[amazondata$review_helpfulness != "0/0" ]
newdata <- amazondata[amazondata$review_helpfulness != "0/0" ]
for (i in 1:99) {
rating <- as.character(0/i)
newdata <- newdata[newdata$review_helpfulness != rating ]
}
newdata <- amazondata[amazondata$review_helpfulness != "0/0" ]
for (i in 1:99) {
rating <- as.character(0/i)
rating
newdata <- newdata[newdata$review_helpfulness != rating ]
}
for (i in 1:99) {
rating <- as.character(0/i)
print(rating)
newdata <- newdata[newdata$review_helpfulness != rating ]
}
for (i in 1:99) {
rating <- as.character(ascharacter(0)/i)
print(rating)
newdata <- newdata[newdata$review_helpfulness != rating ]
}
for (i in 1:99) {
rating <- as.character(as.character(0)/i)
print(rating)
newdata <- newdata[newdata$review_helpfulness != rating ]
}
for (i in 1:99) {
rating <- as.character(0)/as.character(i)
print(rating)
newdata <- newdata[newdata$review_helpfulness != rating ]
}
for (i in 1:99) {
rating <- as.character(0)/i
print(rating)
newdata <- newdata[newdata$review_helpfulness != rating ]
}
for (i in 1:99) {
rating <- "0"/i
print(rating)
newdata <- newdata[newdata$review_helpfulness != rating ]
}
for (i in 1:99) {
rating <- "0"/as.character(i)
print(rating)
newdata <- newdata[newdata$review_helpfulness != rating ]
}
newdata <- newdata[newdata$review_helpfulness != "0/1" ]
newdata <- newdata[newdata$review_helpfulness != "0/2" ]
newdata <- newdata[newdata$review_helpfulness != "0/3" ]
newdata <- newdata[newdata$review_helpfulness != "0/4" ]
newdata <- newdata[newdata$review_helpfulness != "0/5" ]
newdata <- newdata[newdata$review_helpfulness != "0/6" ]
newdata <- newdata[newdata$review_helpfulness != "0/7" ]
newdata <- newdata[newdata$review_helpfulness != "0/8" ]
newdata <- newdata[newdata$review_helpfulness != "0/9" ]
newdata <- newdata[newdata$review_helpfulness != "0/10" ]
newdata <- newdata[newdata$review_helpfulness != "0/11" ]
newdata <- newdata[newdata$review_helpfulness != 0 ]
newdata <- amazondata[amazondata$review_helpfulness != "0/0" ]
newdata <- newdata[newdata$review_helpfulness != 0 ]
newdata$review_helpfulness <- as.numeric(newdata$review_helpfulness)
newdata <- newdata[newdata$review_helpfulness != NA ]
newdata <- amazondata[amazondata$review_helpfulness != "0/0" ]
newdata$review_helpfulness <- as.numeric(newdata$review_helpfulness)
sapply(newdata, class)
newdata <- amazondata[amazondata$review_helpfulness != "0/0" ]
sapply(newdata, class)
type.convert(newdata$review_helpfulness)
for ( i in 1: length(newdata)){
newdata$review_helpfulness[i] <- type.convert(newdata$review_helpfulness[i])
}
sapply(newdata, class)
for ( i in 1: length(newdata)){
newdata$review_helpfulness[i] <- type.convert(newdata$review_helpfulness[i])
print(newdata$review_helpfulness[i])
}
length(newdata)
length(newdata$review_helpfulness)
for ( i in 1: length(newdata$review_helpfulness)){
newdata$review_helpfulness[i] <- type.convert(newdata$review_helpfulness[i])
}
newdata <- amazondata[amazondata$review_helpfulness != "0/0" ]
newdata <- newdata[newdata$review_helpfulness != "0/1" ]
newdata <- newdata[newdata$review_helpfulness != "0/2" ]
newdata <- newdata[newdata$review_helpfulness != "0/3" ]
newdata <- newdata[newdata$review_helpfulness != "0/4" ]
newdata <- newdata[newdata$review_helpfulness != "0/5" ]
newdata <- newdata[newdata$review_helpfulness != "0/6" ]
newdata <- newdata[newdata$review_helpfulness != "0/7" ]
newdata <- newdata[newdata$review_helpfulness != "0/8" ]
for (i in 1:99) {
intera <- paste("0/", i)
print(rating)
newdata <- newdata[newdata$review_helpfulness != itera ]
}
for (i in 1:99) {
itera <- paste("0/", i)
print(rating)
newdata <- newdata[newdata$review_helpfulness != itera ]
}
for (i in 1:99) {
itera <- paste0("0/", i)
print(rating)
newdata <- newdata[newdata$review_helpfulness != itera ]
}
for (i in 1:999) {
itera <- paste0("0/", i)
print(rating)
newdata <- newdata[newdata$review_helpfulness != itera ]
}
lessdata<- newdata
lessdata <-  lessdata[lessdata$review_helpfulness != "1/1" ]
lessdata <-  lessdata[lessdata$review_helpfulness != "0/1" ]
lessdatakey <- lessdata$product_productid
for (i in 1 :  20000){
newinfo[i] <- search.amazon(Keywords=newdata$review_helpfulness[i],AWSAccessKeyId="AKIAJCYPY2UUDPZA6W2Q",AWSsecretkey="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", AssociateTag="jzjz-20")
Sys.sleep(1)
}
newinfo[9999]
fene <- 6470644.21
shizhi <- 6917.765.72
jingzhi <- 1.0691
fudong <- 117.765.72
fene <- 6470644.21
shizhi <- 6917765.72
jingzhi <- 1.0691
fudong <- 117765.72
shizhi*(1- (0.0004+0.002))
shizhi - fene
(shizhi - fene)/shizhi
shizhi * 0.046
shizhi - fene - shizhi*0.046
128904.3*0.8 + 447121.5 + fene
647*0.046
691-647-30
14*0.8
(shizhi-fene)/fene
691-3
int <- 10
bottleforbeer <- 2
capforbeer <- 4
beercost <- 2
beerdrank <- 0
capamount <- 0
bottleamount <- 0
beertemp <- beerdrank <- int/beercost
capamount <- bottleamount <- beertemp
cap(capamount, capforbear){
if (capamount > =4 ){
cap <- floor(capamount/capforbear)
capamount <- capamount - cap*capforbear
}
else
cap <- 0
}
cap <- cap(capamount, capforbear){
if (capamount > =4 ){
bottletemp <- floor(capamount/capforbear)
capamount <- capamount - bottletemp*capforbear
}
else
cap <- 0
return(cap)
}
cap <- cap(capamount, capforbear){
if (capamount > =4 ){
bottletemp <- floor(capamount/capforbear)
capamount <- capamount - bottletemp*capforbear
}
else
cap <- 0
}
cap <- cap(capamount, capforbeer){
if (capamount > =4 ){
bottletemp <- floor(capamount/capforbeer)
capamount <- capamount - bottletemp*capforbeer
}
else
cap <- 0
}
cap <- cap(capamount, capforbeer){
if (capamount >=4 ){
cap <- floor(capamount/capforbeer)
capamount <- capamount - cap*capforbeer
}
else{
cap <- 0}
return(cap)
}
install.packages("dplyr")
install.packages("shiny")
install.packages("data.table")
install.packages("dylyr")
install.packages("ggplot2")
install.packages("stringr")
install.packages("tm")
install.packages("seqinr")
install.packages("Biostrings")
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
library(Biostrings)
shiny::runApp('C:/Users/ouwen/Downloads/Project4')
runApp('C:/Users/ouwen/Downloads/Project4')
runApp('C:/Users/ouwen/Downloads/Project4')
load("matData.RData")
setwd("C:/Users/ouwen/Downloads/Project4/")
load("matData.RData")
runApp()
library(dplyr)
library(stringr)
library(tm)
library(seqinr)
library(Biostrings)
## Read in data, source func
load("matData.RData")
source("find.R")
source("findWithTypo.R")
source("findWithTypo.R")
source("findWithTypo.R")
findWithTypo("Rea Monst")
runApp()
runApp()
source('C:/Users/ouwen/Downloads/Project4/find.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
findWithTypo("beautifl mind")
runApp()
findWithTypo("beautifl mind")
runApp()
find("great")
findWithTypo("beautifl mind")
find("great")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
