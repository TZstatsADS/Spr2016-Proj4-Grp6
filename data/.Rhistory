for (i in 1:t){
movie1<-as.matrix(unique(data[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
t
movie2
index<-which(data[,"V1.1"]==movie2)[1]
index
which(data[,"V1.1"]==movie2)
data<-read.csv("datawithnameandgenre.csv")
#now given a movie we try to find the one which has the greatest similarity to it:
movie2<-"The Abyss (Special Edition)"
#if we only want to recommend the movie with the same genere
index<-which(data[,"V1.1"]==movie2)[1]
data2<-data[which(data[,"V2"]==data[index,"V2"]),]
#######################################################
t<-length(unique(data2[,"V1.1"]))
#finally we calculate the similarity of two given movies:
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data2[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
#show the name of the movie that has the highest similarity to the given movie:
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
ptm <- proc.time()
###################
#Remains to improve:
#The minimum number of common users
#If we could stop the current loop as soon as we discover an NA.
#now given a movie we try to find the one which has the greatest similarity to it:
movie2<-"The Abyss (Special Edition)"
#if we only want to recommend the movie with the same genere
index<-which(data[,"V1.1"]==movie2)[1]
data2<-data[which(data[,"V2"]==data[index,"V2"]),]
#######################################################
t<-length(unique(data2[,"V1.1"]))
#finally we calculate the similarity of two given movies:
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data2[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
#show the name of the movie that has the highest similarity to the given movie:
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
ptm <- proc.time()
###################
#Remains to improve:
#The minimum number of common users
#If we could stop the current loop as soon as we discover an NA.
#now given a movie we try to find the one which has the greatest similarity to it:
movie2<-"Brokeback Mountain"
#if we only want to recommend the movie with the same genere
index<-which(data[,"V1.1"]==movie2)[1]
data2<-data[which(data[,"V2"]==data[index,"V2"]),]
#######################################################
t<-length(unique(data2[,"V1.1"]))
#finally we calculate the similarity of two given movies:
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data2[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
#show the name of the movie that has the highest similarity to the given movie:
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
ptm <- proc.time()
###################
#Remains to improve:
#The minimum number of common users
#If we could stop the current loop as soon as we discover an NA.
#finally we calculate the similarity of two given movies:
get_similarity <- function(movie1,movie2){
#get the common reviewer of the two movies:
id <- common_reviewers_by_id(movie1, movie2)
#in case the two movies have no common reviewers：
for (j in 1:length(id)) {
if (is.na(id[j])) {
return (NA)
break
}
}
#get the review scores of the two movies of these common users:
metrics1 <- get_review_metrics(movie1,id)
metrics2 <- get_review_metrics(movie2,id)
#regard helpfulness as the weight of every user's score
#muliple every score by its helpfulness:
product <- function(metrics){
names <- names(metrics)
temp1 <- sapply(as.matrix(metrics[names[1]]), function(x) eval(parse(text=x)))
temp2 <- sapply(as.matrix(metrics[names[2]]), function(x) eval(parse(text=x)))
temp1*temp2
}
#similarity is defined as the cosine of angle of two vectors that we get,
#The greater the cosine is, the greater the correlation is.
#the following equation if the cross product of the two vectors devided by
#the product of the vector norms
similarity <- product(metrics1)%*%product(metrics2)/(product(metrics1)%*%product(metrics1)*product(metrics2)%*%product(metrics2))^0.5
#get rid of the value 1
if (similarity == 1){
similarity = NA
}
similarity
}
#########################################
########### the implementation ##########
#########################################
#now given a movie we try to find the one which has the greatest similarity to it:
movie2<-"Brokeback Mountain"
#if we only want to recommend the movie with the same genere
index<-which(data[,"V1.1"]==movie2)[1]
data2<-data[which(data[,"V2"]==data[index,"V2"]),]
#######################################################
t<-length(unique(data2[,"V1.1"]))
#finally we calculate the similarity of two given movies:
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data2[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
#show the name of the movie that has the highest similarity to the given movie:
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
#record the time consumed
ptm <- proc.time()
###################
#Remains to improve:
#The minimum number of common users
#If we could stop the current loop as soon as we discover an NA.
ptm
#now given a movie we try to find the one which has the greatest similarity to it:
movie2<-"Brokeback Mountain"
# #if we only want to recommend the movie with the same genere
# index<-which(data[,"V1.1"]==movie2)[1]
# data2<-data[which(data[,"V2"]==data[index,"V2"]),]
# #######################################################
t<-length(unique(data2[,"V1.1"]))
#finally we calculate the similarity of two given movies:
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data2[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
#show the name of the movie that has the highest similarity to the given movie:
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
#record the time consumed
ptm <- proc.time()
###################
#Remains to improve:
#The minimum number of common users
#If we could stop the current loop as soon as we discover an NA.
ptm
#now given a movie we try to find the one which has the greatest similarity to it:
movie2<-"Brokeback Mountain"
t<-length(unique(data[,"V1.1"]))
#finally we calculate the similarity of two given movies:
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
#show the name of the movie that has the highest similarity to the given movie:
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
#record the time consumed
ptm <- proc.time()
###################
#Remains to improve:
#The minimum number of common users
#If we could stop the current loop as soon as we discover an NA.
#finally we calculate the similarity of two given movies:
get_similarity <- function(movie1,movie2){
#get the common reviewer of the two movies:
id <- common_reviewers_by_id(movie1, movie2)
#in case the two movies have no common reviewers：
for (j in 1:length(id)) {
if (is.na(id[j])) {
return (NA)
break
}
}
#get the review scores of the two movies of these common users:
metrics1 <- get_review_metrics(movie1,id)
metrics2 <- get_review_metrics(movie2,id)
#regard helpfulness as the weight of every user's score
#muliple every score by its helpfulness:
product <- function(metrics){
names <- names(metrics)
temp1 <- sapply(as.matrix(metrics[names[1]]), function(x) eval(parse(text=x)))
temp2 <- sapply(as.matrix(metrics[names[2]]), function(x) eval(parse(text=x)))
temp1*temp2
}
#similarity is defined as the cosine of angle of two vectors that we get,
#The greater the cosine is, the greater the correlation is.
#the following equation if the cross product of the two vectors devided by
#the product of the vector norms
similarity <- product(metrics1)%*%product(metrics2)/(product(metrics1)%*%product(metrics1)*product(metrics2)%*%product(metrics2))^0.5
#get rid of the value 1
if (similarity == 1){
similarity = NA
}
similarity
}
movie1
movie1
movie2
get_similarity(movie1,movie2)
id <- common_reviewers_by_id(movie1, movie2)
#in case the two movies have no common reviewers：
for (j in 1:length(id)) {
if (is.na(id[j])) {
return (NA)
break
}
}
#get the review scores of the two movies of these common users:
metrics1 <- get_review_metrics(movie1,id)
metrics2 <- get_review_metrics(movie2,id)
#regard helpfulness as the weight of every user's score
#muliple every score by its helpfulness:
product <- function(metrics){
names <- names(metrics)
temp1 <- sapply(as.matrix(metrics[names[1]]), function(x) eval(parse(text=x)))
temp2 <- sapply(as.matrix(metrics[names[2]]), function(x) eval(parse(text=x)))
temp1*temp2
}
#similarity is defined as the cosine of angle of two vectors that we get,
#The greater the cosine is, the greater the correlation is.
#the following equation if the cross product of the two vectors devided by
#the product of the vector norms
similarity <- product(metrics1)%*%product(metrics2)/(product(metrics1)%*%product(metrics1)*product(metrics2)%*%product(metrics2))^0.5
#get rid of the value 1
if (similarity == 1){
similarity = NA
}
similarity
}
id <- common_reviewers_by_id(movie1, movie2)
#in case the two movies have no common reviewers：
for (j in 1:length(id)) {
if (is.na(id[j])) {
return (NA)
break
}
}
#get the review scores of the two movies of these common users:
metrics1 <- get_review_metrics(movie1,id)
metrics2 <- get_review_metrics(movie2,id)
#regard helpfulness as the weight of every user's score
#muliple every score by its helpfulness:
product <- function(metrics){
names <- names(metrics)
temp1 <- sapply(as.matrix(metrics[names[1]]), function(x) eval(parse(text=x)))
temp2 <- sapply(as.matrix(metrics[names[2]]), function(x) eval(parse(text=x)))
temp1*temp2
}
#similarity is defined as the cosine of angle of two vectors that we get,
#The greater the cosine is, the greater the correlation is.
#the following equation if the cross product of the two vectors devided by
#the product of the vector norms
similarity <- product(metrics1)%*%product(metrics2)/(product(metrics1)%*%product(metrics1)*product(metrics2)%*%product(metrics2))^0.5
#get rid of the value 1
if (similarity == 1){
similarity = NA
}
similarity
for (j in 1:length(id)) {
if (is.na(id[j])) {
return (NA)
break
}
}
id <- common_reviewers_by_id(movie1, movie2)
any(is.na(Id))
any(is.na(id))
id
#finally we calculate the similarity of two given movies:
get_similarity <- function(movie1,movie2){
#get the common reviewer of the two movies:
id <- common_reviewers_by_id(movie1, movie2)
#in case the two movies have no common reviewers：
if (any(is.na(id))) {
return (NA)
}else{
#get the review scores of the two movies of these common users:
metrics1 <- get_review_metrics(movie1,id)
metrics2 <- get_review_metrics(movie2,id)
#regard helpfulness as the weight of every user's score
#muliple every score by its helpfulness:
product <- function(metrics){
names <- names(metrics)
temp1 <- sapply(as.matrix(metrics[names[1]]), function(x) eval(parse(text=x)))
temp2 <- sapply(as.matrix(metrics[names[2]]), function(x) eval(parse(text=x)))
temp1*temp2
}
#similarity is defined as the cosine of angle of two vectors that we get,
#The greater the cosine is, the greater the correlation is.
#the following equation if the cross product of the two vectors devided by
#the product of the vector norms
similarity <- product(metrics1)%*%product(metrics2)/(product(metrics1)%*%product(metrics1)*product(metrics2)%*%product(metrics2))^0.5
#get rid of the value 1
if (similarity == 1){
similarity = NA
}
similarity
}
}
#now given a movie we try to find the one which has the greatest similarity to it:
movie2<-"Brokeback Mountain"
t<-length(unique(data[,"V1.1"]))
#finally we calculate the similarity of two given movies:
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
#show the name of the movie that has the highest similarity to the given movie:
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
#record the time consumed
ptm <- proc.time()
###################
#Remains to improve:
#The minimum number of common users
#If we could stop the current loop as soon as we discover an NA.
ptm
#if we only focus on the movie with the same genere:
movie2<-"Brokeback Mountain"
index<-which(data[,"V1.1"]==movie2)[1]
data2<-data[which(data[,"V2"]==data[index,"V2"]),]
t<-length(unique(data2[,"V1.1"]))
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data2[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
#if we only focus on the movie with the same genere:
movie2<-"Beyond Tomorrow"
index<-which(data[,"V1.1"]==movie2)[1]
data2<-data[which(data[,"V2"]==data[index,"V2"]),]
t<-length(unique(data2[,"V1.1"]))
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data2[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
movie2<-"Brother Sun, Sister Moon (Widescreen)"
index<-which(data[,"V1.1"]==movie2)[1]
data2<-data[which(data[,"V2"]==data[index,"V2"]),]
t<-length(unique(data2[,"V1.1"]))
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data2[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
data<-read.csv("datawithnameandgenre.csv")
movie2<-"Brother Sun, Sister Moon (Widescreen)"
index<-which(data[,"V1.1"]==movie2)[1]
data2<-data[which(data[,"V2"]==data[index,"V2"]),]
t<-length(unique(data2[,"V1.1"]))
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data2[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
t
index<-which(data[,"V1.1"]==movie2)[1]
index
data[9701,]
unique(data2[,"V1.1"])
t<-length(unique(data2[,"V1.1"]))
t
#if we only focus on the movie with the same genere:
movie2<-"The Last Samurai"
index<-which(data[,"V1.1"]==movie2)[1]
data2<-data[which(data[,"V2"]==data[index,"V2"]),]
t<-length(unique(data2[,"V1.1"]))
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data2[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
#if we only focus on the movie with the same genere:
movie2<-"The Last Samurai"
index<-which(data[,"V1.1"]==movie2)[1]
data2<-data[which(data[,"V2"]==data[index,"V2"]),]
t<-length(unique(data2[,"V1.1"]))
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data2[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
#if we only focus on the movie with the same genere:
movie2<-"The Ten Commandments"
index<-which(data[,"V1.1"]==movie2)[1]
data2<-data[which(data[,"V2"]==data[index,"V2"]),]
t<-length(unique(data2[,"V1.1"]))
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data2[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
data<-read.csv("datawithnameandgenre.csv")
#if we only focus on the movie with the same genere:
movie2<-"The Ten Commandments"
index<-which(data[,"V1.1"]==movie2)[1]
data2<-data[which(data[,"V2"]==data[index,"V2"]),]
t<-length(unique(data2[,"V1.1"]))
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data2[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
t
data2<-data[which(data[,"V2"]==data[index,"V2"]),]
data2
data2[,"V1.1"]
unique(data2[,"V1.1"])
#if we only focus on the movie with the same genere:
#which really saves time
movie2 <- "Minority Report"
index<-which(data[,"V1.1"]==movie2)[1]
data2<-data[which(data[,"V2"]==data[index,"V2"]),]
t<-length(unique(data2[,"V1.1"]))
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data2[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
movie2 <- "La Bamba"
index<-which(data[,"V1.1"]==movie2)[1]
data2<-data[which(data[,"V2"]==data[index,"V2"]),]
t<-length(unique(data2[,"V1.1"]))
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data2[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
#if we only focus on the movie with the same genere:
#which really saves time
movie2 <- "Brokeback Mountain"
index<-which(data[,"V1.1"]==movie2)[1]
data2<-data[which(data[,"V2"]==data[index,"V2"]),]
t<-length(unique(data2[,"V1.1"]))
similarity <- data.frame("V1.1"=NA,"similarity"=NA)
for (i in 1:t){
movie1<-as.matrix(unique(data2[,"V1.1"]))[i]
similarity[i,1] <- movie1
similarity[i,2] <- get_similarity(movie1,movie2)
print(i)
}
similarity <- na.omit(similarity)
similarity[which.max(similarity[,2]),1]
