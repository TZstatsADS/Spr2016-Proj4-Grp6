setwd("~/Data Science/project4-team6/data")
# source("https://bioconductor.org/biocLite.R")
# biocLite("Biostrings")
library(dplyr)
library(stringr)
library(tm)
library(seqinr)
library(Biostrings)
## Read in data, source func
load("matData.RData")
source("../lib/find.R")
source("../lib/toWord.R")
source("../lib/vIn.R")
## Try out to find a movie
find("great")
align = function(string1,string2){
Align = pairwiseAlignment(string1, string2,gapOpening=0,gapExtension=0,type="local",scoreOnly = FALSE)
return(score(Align))
}
spellCheck = function(keyW,dicW,dicC){
keyC = lapply(keyW, toCharacter)
keyPre = vector()
for(i in 1:length(keyC)){
score = lapply(dicC,vIn,keyC[[i]])
score = sapply(score,sum)
print(max(score))
if(max(score)==0){
return()
}
thresh = sort(score, decreasing=TRUE)[10]
ind = (score >= max(0, thresh))
dicA = dicW[ind]
align=lapply(dicA,align,string2=keyW)
print(score)
pre = which.max(score)
pre = dicW[ind[pre]]
keyPre = c(keyPre, pre)
}
key = paste(keyPre, sep=" ")
return(key)
}
spellCheck("beauti",dicW,dicC)
spellCheck = function(keyW,dicW,dicC){
keyC = lapply(keyW, toCharacter)
keyPre = vector()
for(i in 1:length(keyC)){
score = lapply(dicC,vIn,keyC[[i]])
score = sapply(score,sum)
print(max(score))
if(max(score)==0){
return()
}
thresh = sort(score, decreasing=TRUE)[10]
ind = (score >= max(0, thresh))
print(sum(ind))
dicA = dicW[ind]
align=lapply(dicA,align,string2=keyW)
#print(score)
pre = which.max(score)
pre = dicW[ind[pre]]
keyPre = c(keyPre, pre)
}
key = paste(keyPre, sep=" ")
return(key)
}
spellCheck("beauti",dicW,dicC)
spellCheck = function(keyW,dicW,dicC){
keyC = lapply(keyW, toCharacter)
keyPre = vector()
for(i in 1:length(keyC)){
score = lapply(dicC,vIn,keyC[[i]])
score = sapply(score,sum)
print(max(score))
if(max(score)==0){
return()
}
thresh = sort(score, decreasing=TRUE)[10]
ind = (score >= max(0, thresh))
print(sum(ind))
dicA = dicW[ind]
score=lapply(dicA,align,string2=keyW)
#print(score)
pre = dicA[which.max(score)]
keyPre = c(keyPre, pre)
}
key = paste(keyPre, sep=" ")
return(key)
}
spellCheck("beauti",dicW,dicC)
spellCheck = function(keyW,dicW,dicC){
keyC = lapply(keyW, toCharacter)
keyPre = vector()
for(i in 1:length(keyC)){
score = lapply(dicC,vIn,keyC[[i]])
score = sapply(score,sum)
print(max(score))
if(max(score)==0){
return()
}
thresh = sort(score, decreasing=TRUE)[5]
ind = (score >= max(0, thresh))
print(sum(ind))
dicA = dicW[ind]
score=lapply(dicA,align,string2=keyW)
#print(score)
pre = dicA[which.max(score)]
keyPre = c(keyPre, pre)
}
key = paste(keyPre, sep=" ")
return(key)
}
spellCheck("beautfl",dicW,dicC)
spellCheck("wold",dicW,dicC)
spellCheck("world",dicW,dicC)
spellCheck("word",dicW,dicC)
spellCheck("ttanic",dicW,dicC)
spellCheck("titanic",dicW,dicC)
spellCheck("beatiful",dicW,dicC)
## Build dictionary
dic = do.call(c,moviesW) %>%
as.factor() %>%
levels()
dic = dic[-(1:140)]
dicW = dic
dicC = lapply(dicW, toCharacter)
## Public func
findWithTypo = function(key){
findWithTypoP(key,moviesW,movies,dicW,dicC)
}
## Private func
findWithTypoP = function(key,moviesW,movies,dicW,dicC){
keyW = toWord(key)
keyT = spellCheck(keyW,dicW,dicC)
print(paste("Do you mean ",keyT,"?",sep=""))
return(find(keyT))
}
findWithTypo("beautifl")
spellCheck = function(keyW,dicW,dicC){
keyC = lapply(keyW, toCharacter)
keyPre = vector()
for(i in 1:length(keyC)){
score = lapply(dicC,vIn,keyC[[i]])
score = sapply(score,sum)
if(max(score)==0){
return()
}
thresh = sort(score, decreasing=TRUE)[5]
ind = (score >= max(0, thresh))
dicA = dicW[ind]
score=lapply(dicA,align,string2=keyW)
#print(score)
pre = dicA[which.max(score)]
keyPre = c(keyPre, pre)
}
key = paste(keyPre, sep=" ")
return(key)
}
## Build dictionary
dic = do.call(c,moviesW) %>%
as.factor() %>%
levels()
dic = dic[-(1:140)]
dicW = dic
dicC = lapply(dicW, toCharacter)
## Public func
findWithTypo = function(key){
findWithTypoP(key,moviesW,movies,dicW,dicC)
}
## Private func
findWithTypoP = function(key,moviesW,movies,dicW,dicC){
keyW = toWord(key)
keyT = spellCheck(keyW,dicW,dicC)
print(paste("Do you mean '",keyT,"'?",sep=""))
return(find(keyT))
}
findWithTypo("beautifl")
findWithTypo("beautifl mid")
## Build dictionary
dic = do.call(c,moviesW) %>%
as.factor() %>%
levels()
dic = dic[-(1:140)]
dicW = dic
dicC = lapply(dicW, toCharacter)
## Public func
findWithTypo = function(key){
findWithTypoP(key,moviesW,movies,dicW,dicC)
}
## Private func
findWithTypoP = function(key,moviesW,movies,dicW,dicC){
keyW = toWord(key)
keyT = keyW
for(i in 1:length(keyW)){
keyT[i] = spellCheck(keyW[i],dicW,dicC)
}
keyT = spellCheck(keyW,dicW,dicC)
print(paste("Do you mean '",keyT,"'?",sep=""))
return(find(keyT))
}
## Build dictionary
dic = do.call(c,moviesW) %>%
as.factor() %>%
levels()
dic = dic[-(1:140)]
dicW = dic
dicC = lapply(dicW, toCharacter)
## Public func
findWithTypo = function(key){
findWithTypoP(key,moviesW,movies,dicW,dicC)
}
## Private func
findWithTypoP = function(key,moviesW,movies,dicW,dicC){
keyW = toWord(key)
keyT = keyW
for(i in 1:length(keyW)){
keyT[i] = spellCheck(keyW[i],dicW,dicC)
}
print(paste("Do you mean '",keyT,"'?",sep=""))
return(find(keyT))
}
findWithTypo("beautifl mid")
?pairwiseAlignment
align = function(string1,string2){
Align = pairwiseAlignment(string1, string2, scoreOnly = TRUE)
return(score(Align))
}
findWithTypo("beautifl mid")
align = function(string1,string2){
Align = pairwiseAlignment(string1, string2, scoreOnly = TRUE)
return(Align)
}
findWithTypo("beautifl mid")
## Build dictionary
dic = do.call(c,moviesW) %>%
as.factor() %>%
levels()
dic = dic[-(1:140)]
dicW = dic
dicC = lapply(dicW, toCharacter)
## Public func
findWithTypo = function(key){
findWithTypoP(key,moviesW,movies,dicW,dicC)
}
## Private func
findWithTypoP = function(key,moviesW,movies,dicW,dicC){
keyW = toWord(key)
keyT = keyW
for(i in 1:length(keyW)){
keyT[i] = spellCheck(keyW[i],dicW,dicC)
}
keyT = paste(keyT,sep=" ")
print(paste("Do you mean '",keyT,"'?",sep=""))
return(find(keyT))
}
findWithTypo("beautifl mid")
## Build dictionary
dic = do.call(c,moviesW) %>%
as.factor() %>%
levels()
dic = dic[-(1:140)]
dicW = dic
dicC = lapply(dicW, toCharacter)
## Public func
findWithTypo = function(key){
findWithTypoP(key,moviesW,movies,dicW,dicC)
}
## Private func
findWithTypoP = function(key,moviesW,movies,dicW,dicC){
keyW = toWord(key)
keyT = keyW
for(i in 1:length(keyW)){
keyT[i] = spellCheck(keyW[i],dicW,dicC)
}
keyT = paste(keyT,sep=" ")
print(paste("Do you mean '",keyT,"'?",sep=""))
return(find(keyT))
}
findWithTypo("beautifl mid")
## Build dictionary
dic = do.call(c,moviesW) %>%
as.factor() %>%
levels()
dic = dic[-(1:140)]
dicW = dic
dicC = lapply(dicW, toCharacter)
## Public func
findWithTypo = function(key){
findWithTypoP(key,moviesW,movies,dicW,dicC)
}
## Private func
findWithTypoP = function(key,moviesW,movies,dicW,dicC){
keyW = toWord(key)
keyT = keyW
for(i in 1:length(keyW)){
keyT[i] = spellCheck(keyW[i],dicW,dicC)
}
keyT = paste(keyT,sep=" ")
print(keyT)
print(paste("Do you mean '",keyT,"'?",sep=""))
return(find(keyT))
}
findWithTypo("beautifl mid")
play = c("beautiful","mind")
play = paste(play, sep=" ")
play
paste("a","b",sep=" ")
## Build dictionary
dic = do.call(c,moviesW) %>%
as.factor() %>%
levels()
dic = dic[-(1:140)]
dicW = dic
dicC = lapply(dicW, toCharacter)
## Public func
findWithTypo = function(key){
findWithTypoP(key,moviesW,movies,dicW,dicC)
}
## Private func
findWithTypoP = function(key,moviesW,movies,dicW,dicC){
keyW = toWord(key)
keyT = keyW
for(i in 1:length(keyW)){
keyT[i] = spellCheck(keyW[i],dicW,dicC)
}
keyT = do.call(paste,keyT,sep=" ")
print(keyT)
print(paste("Do you mean '",keyT,"'?",sep=""))
return(find(keyT))
}
findWithTypo("beautifl mid")
?do.call
## Build dictionary
dic = do.call(c,moviesW) %>%
as.factor() %>%
levels()
dic = dic[-(1:140)]
dicW = dic
dicC = lapply(dicW, toCharacter)
## Public func
findWithTypo = function(key){
findWithTypoP(key,moviesW,movies,dicW,dicC)
}
## Private func
findWithTypoP = function(key,moviesW,movies,dicW,dicC){
keyW = toWord(key)
keyT = keyW
for(i in 1:length(keyW)){
keyT[i] = spellCheck(keyW[i],dicW,dicC)
}
keyT = do.call(paste,list(keyT,sep=" "))
print(keyT)
print(paste("Do you mean '",keyT,"'?",sep=""))
return(find(keyT))
}
findWithTypo("beautifl mid")
## Build dictionary
dic = do.call(c,moviesW) %>%
as.factor() %>%
levels()
dic = dic[-(1:140)]
dicW = dic
dicC = lapply(dicW, toCharacter)
## Public func
findWithTypo = function(key){
findWithTypoP(key,moviesW,movies,dicW,dicC)
}
## Private func
findWithTypoP = function(key,moviesW,movies,dicW,dicC){
keyW = toWord(key)
keyT = keyW
for(i in 1:length(keyW)){
keyT[i] = spellCheck(keyW[i],dicW,dicC)
}
paste(sdata, collapse = '',sep=" ")
print(keyT)
print(paste("Do you mean '",keyT,"'?",sep=""))
return(find(keyT))
}
findWithTypo("beautifl mid")
## Build dictionary
dic = do.call(c,moviesW) %>%
as.factor() %>%
levels()
dic = dic[-(1:140)]
dicW = dic
dicC = lapply(dicW, toCharacter)
## Public func
findWithTypo = function(key){
findWithTypoP(key,moviesW,movies,dicW,dicC)
}
## Private func
findWithTypoP = function(key,moviesW,movies,dicW,dicC){
keyW = toWord(key)
keyT = keyW
for(i in 1:length(keyW)){
keyT[i] = spellCheck(keyW[i],dicW,dicC)
}
keyT = paste(keyT, collapse = '',sep=" ")
print(keyT)
print(paste("Do you mean '",keyT,"'?",sep=""))
return(find(keyT))
}
findWithTypo("beautifl mid")
## Build dictionary
dic = do.call(c,moviesW) %>%
as.factor() %>%
levels()
dic = dic[-(1:140)]
dicW = dic
dicC = lapply(dicW, toCharacter)
## Public func
findWithTypo = function(key){
findWithTypoP(key,moviesW,movies,dicW,dicC)
}
## Private func
findWithTypoP = function(key,moviesW,movies,dicW,dicC){
keyW = toWord(key)
keyT = keyW
for(i in 1:length(keyW)){
keyT[i] = spellCheck(keyW[i],dicW,dicC)
}
keyT = paste(keyT, collapse = " ")
print(keyT)
print(paste("Do you mean '",keyT,"'?",sep=""))
return(find(keyT))
}
findWithTypo("beautifl mid")
## Build dictionary
dic = do.call(c,moviesW) %>%
as.factor() %>%
levels()
dic = dic[-(1:140)]
dicW = dic
dicC = lapply(dicW, toCharacter)
## Public func
findWithTypo = function(key){
findWithTypoP(key,moviesW,movies,dicW,dicC)
}
## Private func
findWithTypoP = function(key,moviesW,movies,dicW,dicC){
keyW = toWord(key)
keyT = keyW
for(i in 1:length(keyW)){
keyT[i] = spellCheck(keyW[i],dicW,dicC)
}
keyT = paste(keyT, collapse = " ")
print(paste("Do you mean '",keyT,"'?",sep=""))
return(find(keyT))
}
## Set up
source(../lib/align.R)
source(../lib/toCharacter.R)
source(../lib/spellCheck.R)
## Build dictionary
dic = do.call(c,moviesW) %>%
as.factor() %>%
levels()
dic = dic[-(1:140)]
dicW = dic
dicC = lapply(dicW, toCharacter)
## Public func
findWithTypo = function(key){
findWithTypoP(key,moviesW,movies,dicW,dicC)
}
## Private func
findWithTypoP = function(key,moviesW,movies,dicW,dicC){
keyW = toWord(key)
keyT = keyW
for(i in 1:length(keyW)){
keyT[i] = spellCheck(keyW[i],dicW,dicC)
}
keyT = paste(keyT, collapse = " ")
print(paste("Do you mean '",keyT,"'?",sep=""))
return(find(keyT))
}
## Set up
setwd("~/Data Science/project4-team6/data")
# source("https://bioconductor.org/biocLite.R")
# biocLite("Biostrings")
library(dplyr)
library(stringr)
library(tm)
library(seqinr)
library(Biostrings)
## Read in data, source func
load("matData.RData")
source("../lib/find.R")
source("../lib/findWithTypoe.R")
## Set up
setwd("~/Data Science/project4-team6/data")
# source("https://bioconductor.org/biocLite.R")
# biocLite("Biostrings")
library(dplyr)
library(stringr)
library(tm)
library(seqinr)
library(Biostrings)
## Read in data, source func
load("matData.RData")
source("../lib/find.R")
source("../lib/findWithTypo.R")
## Try out to find a movie
find("great")
system.time(find("happy"))
## Try out to find a movie with typo
findWithTypo("", moviesW, movies, dic)
findWithTypo("beauti mind", moviesW, movies, dic)
findWithTypo("beauti mind")
movies[77]
findWithTypo("Rea Monsta")
findWithTypo("Rea Monst")
findWithTypo("beautifl mind")
